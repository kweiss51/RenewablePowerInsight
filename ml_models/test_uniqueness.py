#!/usr/bin/env python3
"""
Test script to demonstrate the new uniqueness checking functionality
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

from automated_blog_generator import AutomatedBlogGenerator, integrate_with_ml_system

def test_uniqueness_features():
    """Test the new uniqueness checking features"""
    
    print("🧪 Testing ML Model Uniqueness Features")
    print("=" * 50)
    
    # Initialize the blog generator
    blog_gen = AutomatedBlogGenerator("../posts")
    
    # Test 1: Check current uniqueness stats
    print("\n1️⃣ Current Uniqueness Statistics:")
    stats = blog_gen.get_uniqueness_stats()
    print(f"   📊 Tracked titles: {stats['total_tracked_titles']}")
    print(f"   🖼️ Tracked images: {stats['total_tracked_images']}")
    print(f"   🏷️ Tracked topics: {stats['total_tracked_topics']}")
    
    # Test 2: Test uniqueness checking for potentially duplicate content
    print("\n2️⃣ Testing Duplicate Content Detection:")
    
    # Try a title that might already exist
    test_cases = [
        {
            "title": "Solar Panel Efficiency Breakthroughs in 2024",
            "content": "Recent developments in solar technology show breakthrough innovations in photovoltaic efficiency..."
        },
        {
            "title": "Revolutionary Wind Turbine Technology Innovations", 
            "content": "The wind energy sector is experiencing unprecedented technological advances in offshore wind development..."
        },
        {
            "title": "Advanced Battery Storage Systems Market Analysis",
            "content": "Grid-scale energy storage solutions are transforming renewable energy integration capabilities..."
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n   Test {i}: {test_case['title']}")
        uniqueness = blog_gen.check_content_uniqueness(test_case['title'], test_case['content'])
        
        if uniqueness['is_unique']:
            print(f"   ✅ Content is unique")
        else:
            print(f"   ⚠️ Uniqueness issues detected:")
            for issue in uniqueness['issues']:
                print(f"      - {issue}")
            
            # Test content variation generation
            print(f"   🔄 Generating unique variations...")
            variations = blog_gen.generate_unique_content_variations(test_case['title'], test_case['content'])
            print(f"   💡 Suggested unique title: {variations['title']}")
    
    # Test 3: Test unique image selection
    print("\n3️⃣ Testing Unique Image Selection:")
    categories = ['solar', 'wind', 'storage', 'policy']
    
    for category in categories:
        unique_image = blog_gen.get_unique_image(category, f"This is content about {category} technology")
        print(f"   📸 {category.title()}: {unique_image['alt']}")
        print(f"      URL: {unique_image['hero'][:60]}...")
    
    # Test 4: Test ML integration functions
    print("\n4️⃣ Testing ML Integration Interface:")
    ml_interface = integrate_with_ml_system()
    
    print(f"   Available functions:")
    print(f"   - save_post: {callable(ml_interface['save_post'])}")
    print(f"   - check_uniqueness: {callable(ml_interface['check_uniqueness'])}")
    print(f"   - get_stats: {callable(ml_interface['get_stats'])}")
    print(f"   - generate_variations: {callable(ml_interface['generate_variations'])}")
    
    # Test the functions
    test_uniqueness = ml_interface['check_uniqueness'](
        "Test ML Generated Post", 
        "This is test content from the ML system"
    )
    print(f"   ML uniqueness check: {'✅ Unique' if test_uniqueness['is_unique'] else '⚠️ Issues'}")
    
    # Test 5: Demonstrate ML fallback functionality
    print("\n5️⃣ Testing ML Fallback Generation:")
    
    def mock_ml_generator(original_title, original_content, category):
        """Mock ML content generator for testing"""
        print(f"   🤖 Mock ML generator called for category: {category}")
        return {
            'title': f"Advanced {original_title} - AI Generated Update",
            'content': f"{original_content}\n\n## AI-Enhanced Analysis\n\nThis section was generated by the ML fallback system to ensure content uniqueness."
        }
    
    # Test creating a potentially duplicate post with ML fallback
    test_result = blog_gen.create_unique_post_with_ml_fallback(
        "Solar Panel Technology", 
        "Solar technology continues to evolve...",
        auto_git=False,  # Don't commit during testing
        fallback_generator_func=mock_ml_generator
    )
    
    print(f"   Result: {'✅ Success' if test_result.get('uniqueness_checks_passed', True) else '⚠️ Issues'}")
    if test_result.get('used_ml_fallback'):
        print(f"   🤖 ML fallback was used")
    
    print("\n✨ Uniqueness testing completed!")
    print("\nKey Features Demonstrated:")
    print("  ✅ Image uniqueness tracking and selection")
    print("  ✅ Topic and title duplication detection") 
    print("  ✅ Automatic content variation generation")
    print("  ✅ ML fallback integration for failed uniqueness checks")
    print("  ✅ Comprehensive statistics and monitoring")

if __name__ == "__main__":
    test_uniqueness_features()
