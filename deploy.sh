#!/bin/bash

# GitHub Pages Deployment Script for Renewable Power Insight
# This script automates the deployment process for the energy blog

set -e

echo "🚀 Starting Renewable Power Insight deployment..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
REPO_URL="https://github.com/kweiss51/RenewablePowerInsight.git"
BRANCH="main"
SITE_URL="https://kweiss51.github.io/RenewablePowerInsight/"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository. Please run this script from the project root."
    exit 1
fi

print_status "Checking repository status..."

# Check for uncommitted changes
if ! git diff-index --quiet HEAD --; then
    print_warning "You have uncommitted changes. Continuing with deployment..."
fi

# Add all files
print_status "Adding all files to git..."
git add .

# Check if there are changes to commit
if git diff-index --quiet HEAD --; then
    print_warning "No changes to commit."
else
    print_status "Committing changes..."
    COMMIT_MSG="Deploy: $(date '+%Y-%m-%d %H:%M:%S') - Auto-generated content update"
    git commit -m "$COMMIT_MSG"
    print_success "Changes committed with message: $COMMIT_MSG"
fi

# Push to GitHub
print_status "Pushing to GitHub..."
if git push origin $BRANCH; then
    print_success "Successfully pushed to GitHub"
else
    print_error "Failed to push to GitHub"
    exit 1
fi

# Wait for GitHub Pages to process
print_status "Waiting for GitHub Pages to process the deployment..."
sleep 10

# Function to check if site is accessible
check_site() {
    local url=$1
    local max_attempts=12
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        print_status "Checking site accessibility (attempt $attempt/$max_attempts)..."
        
        if curl -s --head "$url" | head -n 1 | grep -q "200 OK"; then
            print_success "Site is accessible at $url"
            return 0
        else
            print_warning "Site not yet accessible, waiting 30 seconds..."
            sleep 30
            ((attempt++))
        fi
    done
    
    print_error "Site is not accessible after $max_attempts attempts"
    return 1
}

# Check site accessibility
if check_site "$SITE_URL"; then
    print_success "🎉 Deployment completed successfully!"
    print_status "Your site is live at: $SITE_URL"
    
    # Open the site in browser (macOS)
    if command -v open > /dev/null 2>&1; then
        print_status "Opening site in browser..."
        open "$SITE_URL"
    fi
else
    print_warning "Deployment may have completed, but site is not yet accessible."
    print_status "Please check GitHub Pages settings and wait a few more minutes."
    print_status "Site URL: $SITE_URL"
fi

# Display next steps
echo ""
echo "📋 Next Steps:"
echo "1. Verify your site is working at: $SITE_URL"
echo "2. Check GitHub Actions for any build errors"
echo "3. Run 'python integrated_blog_system.py' to generate new content"
echo "4. Set up automated daily content generation with 'python daily_automation.py'"
echo ""

# Generate a quick status report
print_status "Generating deployment report..."

cat > deployment_report.md << EOF
# Deployment Report - $(date '+%Y-%m-%d %H:%M:%S')

## Site Information
- **URL**: $SITE_URL
- **Repository**: $REPO_URL
- **Branch**: $BRANCH
- **Last Commit**: $(git log -1 --pretty=format:'%h - %s (%an, %ar)')

## Deployment Status
- **Status**: ✅ Completed
- **Timestamp**: $(date '+%Y-%m-%d %H:%M:%S')
- **Files Deployed**: $(git ls-files | wc -l | tr -d ' ') files

## Site Features
- 🏠 Homepage with live RSS feeds
- 📰 5 live energy news sources
- 🎨 Responsive design with animations
- 📱 Mobile-optimized layout
- 🔍 SEO-optimized structure
- 📧 Newsletter signup integration
- 🤖 AI-powered content generation (backend)

## Next Actions
1. Verify RSS feeds are loading properly
2. Test newsletter signup functionality
3. Run automated content generation
4. Monitor site performance and SEO metrics

## RSS Feed Sources
1. Reuters Energy
2. CleanTechnica
3. Renewable Energy World
4. Solar Power World
5. Wind Power Engineering

---
Generated by deployment script
EOF

print_success "Deployment report saved to deployment_report.md"

echo ""
print_success "🌟 Renewable Power Insight is now live!"
print_status "Visit $SITE_URL to see your energy blog in action"
